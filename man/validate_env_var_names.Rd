% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_env_var_names.R
\name{validate_env_var_names}
\alias{validate_env_var_names}
\title{Validate Environment Variable Names Against Allowed List}
\usage{
validate_env_var_names(var_names, package, warn = TRUE, allowed_vars = NULL)
}
\arguments{
\item{var_names}{Character vector of variable names to validate.}

\item{package}{Character string with the package name to retrieve the allowed list from.}

\item{warn}{Logical; if TRUE (default), issues a warning for unknown variables.
If FALSE, raises an error for unknown variables.}

\item{allowed_vars}{Optional character vector of allowed variable names. If NULL (default),
the function will retrieve the list from the package's YAML config using \code{get_env_var_names()}.}
}
\value{
Logical; TRUE if all variables are valid, FALSE if any are invalid (when warn=TRUE),
or an error (when warn=FALSE).
}
\description{
Ensures that all provided environment variable names are in the allowed list defined
in the package's YAML configuration file. This function provides a safeguard against
typos and ensures consistent variable naming.
}
\details{
This validation function is primarily used internally by other functions in the package,
but can also be used directly in package development to verify environment variable
names before using them.

The function will either warn or error (depending on the \code{warn} parameter) if any
environment variable names are not in the allowed list.
}
\examples{
\dontrun{
# Validate a list of variable names against the package's YAML config
valid <- validate_env_var_names(
  c("MY_PACKAGE_API_KEY", "MY_PACKAGE_DATA_DIR"), 
  package = "mypackage"
)

# With a custom list of allowed variables
allowed <- c("MY_PACKAGE_API_KEY", "MY_PACKAGE_DATA_DIR", "MY_PACKAGE_DEBUG")
valid <- validate_env_var_names(
  c("MY_PACKAGE_API_KEY", "MY_PACKAGE_DEBUG"),
  package = "mypackage",
  allowed_vars = allowed
)

# Error on invalid variables instead of warning
tryCatch({
  validate_env_var_names(
    c("MY_PACKAGE_API_KEY", "TYPO_IN_VAR_NAME"),
    package = "mypackage",
    warn = FALSE
  )
}, error = function(e) {
  cat("Validation failed:", e$message, "\n")
})
}

}
\keyword{internal}
